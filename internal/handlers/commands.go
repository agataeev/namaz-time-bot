package handlers

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"namaz-time-bot/internal/api"
	"namaz-time-bot/internal/db"
)

func HandleCommand(msg *tgbotapi.Message) {
	switch msg.Text {
	case "/start":
		sendWelcomeMessage(msg.Chat.ID)
	case "/mark":
		sendPrayerButtons(msg.Chat.ID)
	case "/prayer_times":
		city, err := db.GetUserCity(msg.Chat.ID)
		if err != nil {
			sendMessage(msg.Chat.ID, "üåç –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city.")
			return
		}

		times, err := api.GetPrayerTimes(city, "Kazakhstan")
		if err != nil {
			sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.")
			return
		}

		response := fmt.Sprintf(
			"–í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –≤ %s:\nüåÖ –§–∞–¥–∂—Ä: %s\nüèôÔ∏è –ó—É—Ö—Ä: %s\nüåá –ê—Å—Ä: %s\nüåÜ –ú–∞–≥—Ä–∏–±: %s\nüåÉ –ò—à–∞: %s",
			city, times.Fajr, times.Dhuhr, times.Asr, times.Maghrib, times.Isha,
		)
		sendMessage(msg.Chat.ID, response)
	case "/set_city":
		sendCityButtons(msg.Chat.ID)
	case "/set_reminders":
		setReminders(msg.Chat.ID)
	case "/help":
		sendHelpMessage(msg.Chat.ID)
	case "/set_prayer_times":
		setPrayerTimes(msg.Chat.ID)
	case "/status":
		showUserStatus(msg.Chat.ID)
	case "/db_test":
		testDatabaseConnection(msg.Chat.ID)
	default:
		sendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// setPrayerTimes —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setPrayerTimes(chatID int64) {
	city, err := db.GetUserCity(chatID)
	if err != nil {
		log.Println(err)
		sendMessage(chatID, "üåç –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city.")
		return
	}

	times, err := api.GetPrayerTimes(city, "Kazakhstan")
	if err != nil {
		log.Println(err)
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	err = db.SavePrayerTimes(chatID, city, times.Fajr, times.Dhuhr, times.Asr, times.Maghrib, times.Isha)
	if err != nil {
		log.Println(err)
		sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.")
		return
	}

	sendMessage(chatID, "‚úÖ –í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–º–∞–∑–æ–≤.")
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func sendWelcomeMessage(chatID int64) {
	text := "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–∞–º–∞–∑–µ!\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

	sendMessage(chatID, text)
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
func sendHelpMessage(chatID int64) {
	text := "üìå *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n" +
		"üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
		"üîπ /set_city - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n" +
		"üîπ /prayer_times - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–æ–≤\n" +
		"üîπ /mark - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–º–∞–∑–∞\n" +
		"üîπ /set_prayer_times - –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤\n" +
		"üîπ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n" +
		"üîπ /db_test - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n" +
		"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n" +
		"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–∞–∑–∞!\n" +
		"–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /set_city"

	sendMessage(chatID, text)
}

// showUserStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func showUserStatus(chatID int64) {
	city, err := db.GetUserCity(chatID)
	if err != nil {
		sendMessage(chatID, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
		return
	}

	times, err := db.GetPrayerTimes(chatID)
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("üåç –ì–æ—Ä–æ–¥: %s\n‚ùå –í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_prayer_times", city))
		return
	}

	status := fmt.Sprintf("üìä *–í–∞—à —Å—Ç–∞—Ç—É—Å:*\n\n"+
		"üåç –ì–æ—Ä–æ–¥: %s\n"+
		"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã\n\n"+
		"‚è∞ *–í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤:*\n"+
		"üåÖ –§–∞–¥–∂—Ä: %s\n"+
		"üèôÔ∏è –ó—É—Ö—Ä: %s\n"+
		"üåá –ê—Å—Ä: %s\n"+
		"üåÜ –ú–∞–≥—Ä–∏–±: %s\n"+
		"üåÉ –ò—à–∞: %s",
		city, times["–§–∞–¥–∂—Ä"], times["–ó—É—Ö—Ä"], times["–ê—Å—Ä"], times["–ú–∞–≥—Ä–∏–±"], times["–ò—à–∞"])

	sendMessage(chatID, status)
}

func setReminders(chatID int64) {
	city, err := db.GetUserCity(chatID)
	if err != nil {
		sendMessage(chatID, "üåç –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_city.")
		return
	}

	times, err := api.GetPrayerTimes(city, "Russia")
	if err != nil {
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î
	err = db.SaveReminder(chatID, "–§–∞–¥–∂—Ä", times.Fajr)
	if err != nil {
		return
	}
	err = db.SaveReminder(chatID, "–ó—É—Ö—Ä", times.Dhuhr)
	if err != nil {
		return
	}
	err = db.SaveReminder(chatID, "–ê—Å—Ä", times.Asr)
	if err != nil {
		return
	}
	err = db.SaveReminder(chatID, "–ú–∞–≥—Ä–∏–±", times.Maghrib)
	if err != nil {
		return
	}
	err = db.SaveReminder(chatID, "–ò—à–∞", times.Isha)
	if err != nil {
		return
	}

	sendMessage(chatID, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞–º–∞–∑–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
}

func sendPrayerButtons(chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –§–∞–¥–∂—Ä", "mark_fajr"),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó—É—Ö—Ä", "mark_dhuhr"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ê—Å—Ä", "mark_asr"),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ú–∞–≥—Ä–∏–±", "mark_maghrib"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ò—à–∞", "mark_isha"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–º–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏:")
	msg.ReplyMarkup = buttons
	_, err := botAPI.Send(msg)
	if err != nil {
		return
	}
}

func sendCityButtons(chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ê–ª–º–∞—Ç—ã", "city_Almaty"),
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ê—Å—Ç–∞–Ω–∞", "city_Astana"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ú–æ—Å–∫–≤–∞", "city_Moscow"),
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ö–∞–∑–∞–Ω—å", "city_Kazan"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ú–µ–∫–∫–∞", "city_Mecca"),
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ú–µ–¥–∏–Ω–∞", "city_Medina"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
	msg.ReplyMarkup = buttons
	botAPI.Send(msg)
}

// testDatabaseConnection —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func testDatabaseConnection(chatID int64) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := db.TestConnection(); err != nil {
		sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n%v", err))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	info, err := db.GetDatabaseInfo()
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n%v", err))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
	tables, err := db.CheckTablesExist()
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:\n%v", err))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	var response string
	response += "‚úÖ *–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω!*\n\n"

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
	if dbName, ok := info["database"]; ok {
		response += fmt.Sprintf("üè∑Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: %v\n", dbName)
	}
	if user, ok := info["user"]; ok {
		response += fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %v\n", user)
	}

	// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	if connections, ok := info["connections"].(map[string]interface{}); ok {
		response += fmt.Sprintf("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v –∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n", connections["total"])
	}

	// –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü
	response += "üìã *–°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü:*\n"
	requiredTables := []string{"users", "prayer_times", "prayers", "reminders"}
	allTablesExist := true

	for _, table := range requiredTables {
		if exists, ok := tables[table]; ok && exists {
			response += fmt.Sprintf("‚úÖ %s\n", table)
		} else {
			response += fmt.Sprintf("‚ùå %s\n", table)
			allTablesExist = false
		}
	}

	if !allTablesExist {
		response += "\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü."
	} else {
		response += "\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–µ—Å—Ç–µ!"
	}

	sendMessage(chatID, response)
}
